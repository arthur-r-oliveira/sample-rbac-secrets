# app-namespace-test-pod.yaml
apiVersion: v1
kind: Pod
metadata:
  name: secret-viewer-test-pod
  namespace: demo-app # Pod runs in app-namespace
spec:
  serviceAccountName: my-serviceaccount # Use the service account with permissions
  # --- START of the crucial securityContext block for the Pod ---
  securityContext:
    runAsNonRoot: true # Enforce running as a non-root user
    seccompProfile:
      type: RuntimeDefault # Use the default seccomp profile
  # --- END of the crucial securityContext block for the Pod ---
  containers:
  - name: test-secret-access
    image: quay.io/rhn_support_arolivei/sample-app-minimal:latest
    command: ["/bin/bash", "-c"]
    args:
    - |
      echo "--- Testing access to secrets in 'spring-petclinic' ---"

      # Get the ServiceAccount token from the pod
      TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
      echo "ServiceAccount Token loaded."

      # Get the Kubernetes API server URL
      KUBERNETES_PORT_443_TCP_ADDR=${KUBERNETES_SERVICE_HOST}
      KUBERNETES_PORT_443_TCP_PORT=${KUBERNETES_SERVICE_PORT}
      KUBERNETES_API_URL="https://${KUBERNETES_PORT_443_TCP_ADDR}:${KUBERNETES_PORT_443_TCP_PORT}"
      echo "Kubernetes API URL: ${KUBERNETES_API_URL}"

      echo -e "\n--- Listing secrets in spring-petclinic (should succeed) ---"
      curl -s -k \
        -H "Authorization: Bearer $TOKEN" \
        ${KUBERNETES_API_URL}/api/v1/namespaces/spring-petclinic/secrets | jq .items[].metadata.name

      echo -e "\n--- Getting 'my-test-secret' from spring-petclinic (should succeed) ---"
      curl -s -k \
        -H "Authorization: Bearer $TOKEN" \
        ${KUBERNETES_API_URL}/api/v1/namespaces/spring-petclinic/secrets/my-test-secret | jq .data

      echo -e "\n--- Attempting to create a secret in spring-petclinic (should FAIL - Forbidden) ---"
      curl -s -k -X POST \
        -H "Authorization: Bearer $TOKEN" \
        -H "Content-Type: application/json" \
        --data '{"apiVersion":"v1","kind":"Secret","metadata":{"name":"forbidden-secret","namespace":"spring-petclinic"},"type":"Opaque","stringData":{"test":"forbidden"}}' \
        ${KUBERNETES_API_URL}/api/v1/namespaces/spring-petclinic/secrets

      echo -e "\n--- Testing access to secrets in 'app-namespace' (should succeed, by default) ---"
      curl -s -k \
        -H "Authorization: Bearer $TOKEN" \
        ${KUBERNETES_API_URL}/api/v1/namespaces/app-namespace/secrets | jq .items[].metadata.name

      echo -e "\n--- Attempting to create a secret in app-namespace (should succeed by default) ---"
      curl -s -k -X POST \
        -H "Authorization: Bearer $TOKEN" \
        -H "Content-Type: application/json" \
        --data '{"apiVersion":"v1","kind":"Secret","metadata":{"name":"allowed-secret","namespace":"app-namespace"},"type":"Opaque","stringData":{"test":"allowed"}}' \
        ${KUBERNETES_API_URL}/api/v1/namespaces/app-namespace/secrets

      sleep 300 # Keep the pod running for inspection
    # --- START of the crucial securityContext block for the Container ---
    securityContext:
      allowPrivilegeEscalation: false # Must be false for restricted SCC
      capabilities:
        drop:
          - ALL # Drop all Linux capabilities
    # --- END of the crucial securityContext block for the Container ---
  restartPolicy: Never # Pod will exit after commands, don't restart it
